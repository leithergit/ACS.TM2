// Created by Microsoft (R) C/C++ Compiler Version 12.00.40629.0 (9c3c89ec).
//
// e:\svn.net\mq.tm2\testcpp\debug\ntcpmsg.tli
//
// Wrapper implementations for Win32 type library NTCPMSG.tlb
// compiler-generated file created 05/26/21 at 15:38:10 - DO NOT EDIT!

#pragma once

//
// interface INTCPMSGInterface wrapper method implementations
//

inline VARIANT_BOOL INTCPMSGInterface::TS_Start ( long nPortNO, unsigned long uUserData, unsigned long onMsgReceive_TS ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TS_Start(nPortNO, uUserData, onMsgReceive_TS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TS_Stop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TS_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TS_IsRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TS_IsRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TC_Connect ( _bstr_t strIP, long nPortNO, unsigned long uUserData, unsigned long onMsgReceive_TC, unsigned long onDisconnect_TC ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TC_Connect(strIP, nPortNO, uUserData, onMsgReceive_TC, onDisconnect_TC, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TC_DisConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TC_DisConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TC_IsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TC_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TC_AsyncSend ( unsigned long uMsgID, const _variant_t & objData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TC_AsyncSend(uMsgID, objData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::TC_SyncSend ( unsigned long uMsgID, const _variant_t & objData, VARIANT * objDataToClient ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TC_SyncSend(uMsgID, objData, objDataToClient, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::ES_Start ( long PortNO, unsigned long uUserData, unsigned long onMsgReceive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ES_Start(PortNO, uUserData, onMsgReceive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::ES_Stop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ES_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::ES_IsRun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ES_IsRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::ES_RaiseEvent ( long nEventID, const _variant_t & objContent ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ES_RaiseEvent(nEventID, objContent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::EC_Connect ( _bstr_t strIP, long nPortNO, unsigned long uUserData, unsigned long onMsgReceive_EC, unsigned long onDisconnect_EC ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EC_Connect(strIP, nPortNO, uUserData, onMsgReceive_EC, onDisconnect_EC, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::EC_DisConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EC_DisConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::EC_IsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EC_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long INTCPMSGInterface::EC_Subscribe ( _bstr_t eventName, const _variant_t & eventParameter ) {
    long _result = 0;
    HRESULT _hr = raw_EC_Subscribe(eventName, eventParameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::EC_UnSubscribe ( long nEventID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EC_UnSubscribe(nEventID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL INTCPMSGInterface::EC_RaiseEvent ( long nEventID, const _variant_t & objEventData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EC_RaiseEvent(nEventID, objEventData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
